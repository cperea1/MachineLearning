# -*- coding: utf-8 -*-
"""HW8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18aRbCchgWEMbWRaw7HyAzfd_kkZYvAub
"""

import torch
import torch.nn as nn
import torchvision.datasets as datasets
import torchvision.transforms as transforms
import matplotlib.pyplot as plt


train_loss_list = []
valid_loss_list = []
train_accuracy_list = []
valid_accuracy_list = []

class MyCNN(nn.Module):
    def __init__(self):
        super(MyCNN, self).__init__()
        self.conv1 = nn.Conv2d(in_channels=1, out_channels=4, kernel_size=5, stride=1, padding=0)
        self.pool1 = nn.MaxPool2d(kernel_size=2, stride=2)
        self.conv2 = nn.Conv2d(in_channels=4, out_channels=2, kernel_size=3, stride=3, padding=0)
        self.pool2 = nn.MaxPool2d(kernel_size=4, stride=4)
        self.fc = nn.Linear(in_features=2, out_features=10)
        self.relu = nn.ReLU()

    def forward(self, x):
        x = self.conv1(x)
        output_size = (x.size()[2] - 5 + 1) // 1
        output_dimension = output_size * 4
        x = self.relu(x)
        x = self.pool1(x)
        output_size = (x.size()[2] - 2 + 1) // 2
        output_dimension = output_size * 4
        x = self.conv2(x)
        output_size = (x.size()[2] - 3 + 1) // 3
        output_dimension = output_size * 2 *2 
        x = self.relu(x)
        x = self.pool2(x)
        output_size = (x.size()[2] - 4 + 1) // 4
        output_dimension = output_size * 2
        x = x.view(-1, 2)
        x = self.fc(x)
        return x


# Load the MNIST dataset
train_dataset = datasets.MNIST(root='./data', train=True, transform=transforms.ToTensor(), download=True)
test_dataset = datasets.MNIST(root='./data', train=False, transform=transforms.ToTensor())

# Create data loaders
train_loader = torch.utils.data.DataLoader(dataset=train_dataset, batch_size=64, shuffle=True)
test_loader = torch.utils.data.DataLoader(dataset=test_dataset, batch_size=64, shuffle=False)

# Create the model
model = MyCNN()

# Define the loss function and optimizer
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.001)

# Train the model
num_epochs = 10
for epoch in range(num_epochs):
    train_loss = 0.0
    valid_loss = 0.0
    train_total = 0
    valid_total = 0
    train_correct = 0
    valid_correct = 0

    for images, labels in train_loader:
        optimizer.zero_grad()
        outputs = model(images)
        # Print the shape of the output tensor after each layer
        #print(outputs.size())
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        # Accumulate the loss and accuracy for this batch
        train_loss += loss.item() * images.size(0)
        _, predicted = torch.max(outputs.data, 1)
        train_total += labels.size(0)
        train_correct += (predicted == labels).sum().item()

    # Compute the epoch loss and accuracy
    train_loss /= len(train_loader.dataset)
    train_accuracy = 100.0 * train_correct / train_total

    with torch.no_grad():
        for images, labels in test_loader:
            outputs = model(images)
            loss = criterion(outputs, labels)

            # Accumulate the loss and accuracy for this batch
            valid_loss += loss.item() * images.size(0)
            _, predicted = torch.max(outputs.data, 1)
            valid_total += labels.size(0)
            valid_correct += (predicted == labels).sum().item()

            
    # Compute the epoch loss and accuracy
    valid_loss /= len(test_loader.dataset)
    valid_accuracy = 100.0 * valid_correct / valid_total

    # Print the accuracy on the test set
    print('Accuracy on the test set: {:.2f}%'.format(valid_accuracy))

    # Update the lists
    train_loss_list.append(train_loss)
    valid_loss_list.append(valid_loss)
    train_accuracy_list.append(train_accuracy)
    valid_accuracy_list.append(valid_accuracy)

    # Print the loss and accuracy for this epoch
    print('Epoch [{}/{}], Train Loss: {:.4f}, Valid Loss: {:.4f}, Train Acc: {:.2f}%, Valid Acc: {:.2f}%'
          .format(epoch+1, num_epochs, train_loss, valid_loss, train_accuracy, valid_accuracy))
# Plot train and validation loss
plt.plot(train_loss_list, label='Train Loss')
plt.plot(valid_loss_list, label='Valid Loss')
plt.legend()
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.title('Train and Valid Loss')
plt.show()

# Plot train and validation accuracy
plt.plot(train_accuracy_list, label='Train Accuracy')
plt.plot(valid_accuracy_list, label='Valid Accuracy')
plt.legend()
plt.xlabel('Epoch')
plt.ylabel('Accuracy (%)')
plt.title('Train and Valid Accuracy')
plt.show()

import torch
import torch.nn as nn
import torchvision.datasets as datasets
import torchvision.transforms as transforms
import matplotlib.pyplot as plt


train_loss_list = []
valid_loss_list = []
train_accuracy_list = []
valid_accuracy_list = []

class MyCNN(nn.Module):
    def __init__(self):
        super(MyCNN, self).__init__()
        self.conv1 = nn.Conv2d(in_channels=1, out_channels=4, kernel_size=3, stride=1, padding=0)
        self.pool1 = nn.MaxPool2d(kernel_size=2, stride=2)
        self.conv2 = nn.Conv2d(in_channels=4, out_channels=2, kernel_size=3, stride=3, padding=0)
        self.pool2 = nn.MaxPool2d(kernel_size=4, stride=4)
        self.fc = nn.Linear(in_features=2, out_features=10)
        self.relu = nn.ReLU()

    def forward(self, x):
        x = self.conv1(x)
        output_size = (x.size()[2] - 3 + 1) // 1
        output_dimension = output_size * 4
        x = self.relu(x)
        x = self.pool1(x)
        output_size = (x.size()[2] - 2 + 1) // 2
        output_dimension = output_size * 4
        x = self.conv2(x)
        output_size = (x.size()[2] - 3 + 1) // 3
        output_dimension = output_size * 2 *2 
        x = self.relu(x)
        x = self.pool2(x)
        output_size = (x.size()[2] - 4 + 1) // 4
        output_dimension = output_size * 2
        x = x.view(-1, 2)
        x = self.fc(x)
        return x

# Load the MNIST dataset
train_dataset = datasets.MNIST(root='./data', train=True, transform=transforms.ToTensor(), download=True)
test_dataset = datasets.MNIST(root='./data', train=False, transform=transforms.ToTensor())

# Create data loaders
train_loader = torch.utils.data.DataLoader(dataset=train_dataset, batch_size=64, shuffle=True)
test_loader = torch.utils.data.DataLoader(dataset=test_dataset, batch_size=64, shuffle=False)

# Create the model
model = MyCNN()

# Define the loss function and optimizer
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.001)

# Train the model
num_epochs = 10
for epoch in range(num_epochs):
    train_loss = 0.0
    valid_loss = 0.0
    train_total = 0
    valid_total = 0
    train_correct = 0
    valid_correct = 0

    for images, labels in train_loader:
        optimizer.zero_grad()
        outputs = model(images)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        # Accumulate the loss and accuracy for this batch
        train_loss += loss.item() * images.size(0)
        _, predicted = torch.max(outputs.data, 1)
        train_total += labels.size(0)
        train_correct += (predicted == labels).sum().item()

    # Compute the epoch loss and accuracy
    train_loss /= len(train_loader.dataset)
    train_accuracy = 100.0 * train_correct / train_total

    with torch.no_grad():
        for images, labels in test_loader:
            outputs = model(images)
            loss = criterion(outputs, labels)

            # Accumulate the loss and accuracy for this batch
            valid_loss += loss.item() * images.size(0)
            _, predicted = torch.max(outputs.data, 1)
            valid_total += labels.size(0)
            valid_correct += (predicted == labels).sum().item()

            
    # Compute the epoch loss and accuracy
    valid_loss /= len(test_loader.dataset)
    valid_accuracy = 100.0 * valid_correct / valid_total

    # Print the accuracy on the test set
    print('Accuracy on the test set: {:.2f}%'.format(valid_accuracy))

    # Update the lists
    train_loss_list.append(train_loss)
    valid_loss_list.append(valid_loss)
    train_accuracy_list.append(train_accuracy)
    valid_accuracy_list.append(valid_accuracy)

    # Print the loss and accuracy for this epoch
    print('Epoch [{}/{}], Train Loss: {:.4f}, Valid Loss: {:.4f}, Train Acc: {:.2f}%, Valid Acc: {:.2f}%'
          .format(epoch+1, num_epochs, train_loss, valid_loss, train_accuracy, valid_accuracy))
# Plot train and validation loss
plt.plot(train_loss_list, label='Train Loss')
plt.plot(valid_loss_list, label='Valid Loss')
plt.legend()
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.title('Train and Valid Loss')
plt.show()

# Plot train and validation accuracy
plt.plot(train_accuracy_list, label='Train Accuracy')
plt.plot(valid_accuracy_list, label='Valid Accuracy')
plt.legend()
plt.xlabel('Epoch')
plt.ylabel('Accuracy (%)')
plt.title('Train and Valid Accuracy')
plt.show()